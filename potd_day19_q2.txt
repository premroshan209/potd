//    https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/

class Solution {
public:
#define ll long long
    long long maximumSubarraySum(vector<int>& nums, int k) {
        ll n = nums.size();
        ll maxi = 0;
        ll sum = 0;
        int j = 0;
        unordered_map<int,int> mp;
        for(int i = 0; i < n; i ++){
            if(i < k - 1){
                mp[nums[i]]++;
                sum += nums[i];
            }
            else{
                mp[nums[i]]++;
                sum += nums[i];
                cout<<sum<<"  ";
                if(mp.size() == k) maxi = max(maxi, sum);
                mp[nums[j]]--;
                if(mp[nums[j]] == 0) mp.erase(nums[j]);
                sum -= nums[j];
                j++;
            }
        }

        return maxi;

    }
};