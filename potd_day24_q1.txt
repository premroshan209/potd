//   https://leetcode.com/problems/compare-version-numbers/


class Solution {
public:
    int j = 0;
    int solve1(string& v1, string& v2, bool flag){
        int ans = 0;
        string s;
        for(int i = 0; i <= v1.size(); i ++){
            if(v1[i] == '.' || i == v1.size()){
                ans = solve(s,v2, flag);
                s.clear();
                if(ans == 1) return 1;
                if(ans == -1) return -1;
            }
            else{
                s.push_back(v1[i]);
            }
        }
        return 0;
    }
    int solve(string s, string& v2,bool flag){
        string s2;
        int n1 = stoi(s);
        if(j == v2.size()){
            int n2 = 0;
        }
        else for( ; j <= v2.size(); j++){
            if(v2[j] == '.' || j == v2.size()){
                j++;
                cout<<n1<<"  "<<stoi(s2)<<endl;
                if(stoi(s2) == n1) return 0;
                if(stoi(s2) < n1 && flag == 1) return 1;
                if(stoi(s2) > n1 && flag == 0) return 1;
                if(stoi(s2) > n1) return -1;
            }
            else{
                s2.push_back(v2[j]);
            }
        }
        if(n1 > 0 && flag == 1) return 1;
        if(n1 > 0 && flag == 0) return -1;  
        return 0;
    }
    int count_dot(string& s){
        int count = 0;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '.') count++;
        }
        return count;
    }
    int compareVersion(string v1, string v2) {
        string s1, s2;
        int n1 = count_dot(v1);
        int n2 = count_dot(v2);

        int ans = 0;
        if(n1 >= n2){
            ans = solve1(v1,v2,1);
        }
        else ans = solve1(v2,v1,0);

        return ans;

    }    
};